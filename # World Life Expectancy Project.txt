# World Life Expectancy Project (Data Cleaning)

- DATA ACQUISITION

• Imported an Excel spreadsheet into a SQL database using SQL's data import wizard.
• Data Source (World Health Organization data repository)


- IDENTIFYING DUPLICATE INFORMATION 

• Ideally, the data will contain rows with unique identifiers which would allow for the use of an aggregate function to determine duplicate information; however, this data set contained no such unique identifier. So instead, I leveraged information within the data set to create a unique identifier for each row contained in the data set which allowed me to use an aggregate function to identify any duplicate information. 

• Given the nature of the information contained within the data set, I realized that each country contained within the data set should only have a single instance of life expectancy data for any given year (e.g., Afghanistan-2017, Afghanistan-2016, etc...). As a result, I combined the country name and corresponding year to create a unique qualifier for each row of data as follows:

	SELECT country, year, CONCAT(country, year)
	FROM   world_life_expectancy;

Example: Afghanistan2017

• With the batch of newly created unique identifiers, I ran an aggregate function to count the number of duplicate identifiers:

	SELECT country, year, CONCAT(country, year), COUNT(CONCAT(country, year))
	FROM world_life_expectancy
	GROUP BY country, year, CONCAT(country, year)
	HAVING COUNT(CONCAT(country, year)) > 1;

• Once I identified the existence of duplicates, I needed to locate the unique Row ID of each duplicate piece of information before I could remove it. I used a window function to locate the ROW IDs of the duplicate information as follows:
	
	SELECT *
	FROM (
		SELECT row_id, 
		CONCAT(country, year),
		ROW_NUMBER() OVER ( PARTITION BY CONCAT(country,year) ORDER BY CONCAT(country, year)) as row_num
		FROM world_life_expectancy
    	     ) as row_table
	WHERE row_num > 1;

• With the Row IDs of the duplicate rows, I could then delete the duplicate information by leveraging the previous code script using a subquery.


-DELETING DUPLICATE INFORMATION

	DELETE from world_life_expectancy
	WHERE 
		row_id IN (
		SELECT row_id
		
	FROM (
		SELECT row_id, 
		CONCAT(country, year),
		ROW_NUMBER() OVER ( PARTITION BY CONCAT(country,year) ORDER BY CONCAT(country, year)) as row_num
		FROM world_life_expectancy
    	     ) as row_table
	WHERE row_num > 1);

• I verified the deletion of the duplicate information by re-running a previous script:

	SELECT *
	FROM (
		SELECT row_id, 
		CONCAT(country, year),
		ROW_NUMBER() OVER ( PARTITION BY CONCAT(country,year) ORDER BY CONCAT(country, year)) as row_num
		FROM world_life_expectancy
    	     ) as row_table
	WHERE row_num > 1;


- IDENTIFYING BLANKS WITHIN THE DATA 
	
	SELECT *
	FROM world_life_expectancy
	WHERE `status` = '';

• Before writing a script to update the blanks in the status column, I first needed to determine the scope of possible options to fill the blanks with. In this instance, there were only two options "developed" or "developing" which I confirmed with the following script:

	SELECT DISTINCT(status)
	FROM world_life_expectancy
	WHERE `status` <> '';

- UPDATING BLANK CELLS

• To update the blanks in this data set. I used a self-join to tie the data set to itself. This was necessary because, without a self-join, SQL would understand me to ask it to take the status from a completed cell and not a completed cell to fill a blank cell. The command would essentially cancel itself out. A workaround to this problem is a self-join as follows:

	UPDATE world_life_expectancy (t1)
	JOIN world_life_expectancy (t2)
	  ON (t1).country = (t2).country
	SET (t1).status = 'developing'
	WHERE (t1).status = ''
	AND (t2).status <> ''
	AND (t2).status = 'developing';

• I verified any remaining blanks by repeating an earlier script:
	
	SELECT *
	FROM world_life_expectancy
	WHERE `status` = '';

• I repeated a previous script to update the missing blanks that corresponded to the "developed" status:

	UPDATE world_life_expectancy (t1)
	JOIN world_life_expectancy (t2)
	  ON (t1).country = (t2).country
	SET (t1).status = 'developed'
	WHERE (t1).status = ''
	AND (t2).status <> ''
	AND (t2).status = 'developed';

• Next, I wrote an additional self-join script to populate missing blanks in the `life expectancy` column. To accomplish this, I found the average life expectancy of the year before the missing cell and the year after the missing cell to fill the blank cell. 

	SELECT (t1).country, (t1).year, (t1).`life expectancy`,(t2).country, (t2).year, (t2).`life expectancy`, (t3).country, (t3).year, (t3).`life expectancy`, ROUND((t2).`life 		       expectancy`+ (t3).`life expectancy`)/2,1)
	FROM world_life_expectancy(t1)
	JOIN world_life_expectancy(t2)
	  ON (t1).country = (t2).country
	  AND (t1).year = (t2).year -1 
	JOIN world_life_expectancy(t3)
	  ON (t1).country = (t3).country
	  AND (t1).year = (t3).year +1 
	WHERE (t1).`life expectancy` = '';

• Once, I knew the missing values to be entered into the blank cells, I could update the table using a variation of the previous self-join script:

	UPDATE world_life_expectancy(t1)
	JOIN world_life_expectancy(t2)
	  ON (t1).country = (t2).country
	  AND (t1).year = (t2).year -1 
	JOIN world_life_expectancy(t3)
	  ON (t1).country = (t3).country
	  AND (t1).year = (t3).year +1 
	SET (t1).`life expectancy` = ROUND(((t2).`life expectancy`+ (t3).`life expectancy`)/2,1)
	WHERE (t1).`life expectancy` = '';

• I used the following script to verify that the blanks were updated:

	SELECT country, year, `life expectancy`
	FROM world_life_expectancy;

------------------------------------------------------------------------------------------------------------------------------------------

# World Life Expectancy Project (Exploratory Data Analysis)

- MIN VS. MAX LIFE EXPECTANCY (by country) OVER THE PAST 15 YEARS

	SELECT country, MIN(`life expectancy`), MAX(`life expectancy`)
	FROM   world_life_expectancy
	GROUP BY country
	HAVING MIN(`life expectancy`) <> 0
	AND MAX(`life expectancy`) <> 0
	ORDER BY country DESC;

- WHICH COUNTRIES HAVE MADE THE LARGEST STRIDES IN LIFE EXPECTANCY OVER THE PAST 15 YEARS

	SELECT country, MIN(`life expectancy`), MAX(`life expectancy`), ROUND(MAX(`life expectancy`) - MIN(`life expectancy`) AS life_increase
	FROM world_life_expectancy
	GROUP BY country
	HAVING MIN(`life expectancy`) <> 0
	AND MAX(`life expectancy`) <> 0
	ORDER BY life_increase DESC;

- WHAT IS THE AVERAGE ANNUAL LIFE EXPECTANCY (GLOBALLY) OVER THE PAST 15 YEARS

	SELECT year, ROUND(AVG(`life expectancy`),2)
	FROM world_life_expectancy
	WHERE MIN(`life expectancy`) <> 0
	AND MAX(`life expectancy`) <> 0
	GROUP BY year
	ORDER BY year;

- IS THERE A CORRELEATION BETWEEN LIFE EXPECTANCY AND GDP?

	SELECT country, ROUND(AVG(`life expectancy`),1) AS life_exp, ROUND(AVG(GDP),1) AS GDP
	FROM world_life_expectancy
	GROUP BY country
	HAVING `life expectancy` > 0
	AND GDP > 0
	ORDER BY GDP ASC

- WHAT IS THE LIFE EXPECTANCY FOR THE TOP HALF OF GDP COUNTRIES VS THE BOTTOM HALF OF GDP COUNTRIES IN THE DATA SET

	SELECT
	   SUM(CASE WHEN GDP >=1500 THEN 1 ELSE 0 END) AS High_GDP_Countries,
	   AVG(CASE WHEN GDP >=1500 THEN `life expectancy` ELSE NULL END) AS High_GDP_Life_Expectancy,
	   SUM(CASE WHEN GDP <=1500 THEN 1 ELSE 0 END) AS Low_GDP_Countries,
	   AVG(CASE WHEN GDP <=1500 THEN `life expectancy` ELSE NULL END) AS Low_GDP_Life_Expectancy
	FROM world_life_expectancy;

	*1500 is the approximate physical midpoint in the data set, when the data set is ordered on GDP*


- WHAT IS THE AVERAGE LIFE EXPECTANCY FOR DEVELOPED COUNTRIES vs DEVELOPING COUNTRIES

	SELECT status, ROUND(AVG(`life expectancy`),1), COUNT(DISTINCT country)
	FROM world_life_expectancy
	GROUP By Status;

- IS THERE A CORRELEATION BETWEEN LIFE EXPECTANCY AND BMI

	SELECT status, ROUND(AVG(`life expectancy`),1) AS life_expectancy, ROUND(AVG(BMI)) AS BMI
	FROM world_life_expectancy
	GROUP BY country
	HAVING BMI > 0
	AND life_expectancy > 0
	ORDER BY BMI;

- WHAT IS THE TOTAL ADULT MORTALITY FOR EACH COUNTRY IN THE DATA SET FOR THE PAST 15 YEARS

	SELECT country, year, `life expectancy`, `adult mortality`, SUM (`adult mortality`)
	OVER (PARTITION BY country ORDER BY year) AS rolling total
	FROM world_life_expectancy;



